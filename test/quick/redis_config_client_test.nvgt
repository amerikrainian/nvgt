// NonVisual Gaming Toolkit (NVGT)
// Copyright (C) 2022-2024 Sam Tupy
// License: zlib (see license.md in the root of the NVGT distribution)

#pragma plugin redis

void main() {
    redis_client@ client = redis_client();

    if (!client.connect()) {
        println("Failed to connect to Redis.");
        return;
    }

    dictionary@ config = client.config_get("maxmemory*");
    println("Config maxmemory*: " + config.get_keys().length());

    @config = client.config_get("timeout");
    println("Timeout config: " + config.get_keys().length());

    @config = client.config_get("*");
    println("Fetched all config keys: " + config.get_keys().length());

    @config = client.config_get("timeout");
    string original_timeout = "";
    array<string>@ config_keys = config.get_keys();
    if (config_keys.length() > 0 && config.exists("timeout")) {
        config.get("timeout", original_timeout);
        println("Original timeout: " + original_timeout);
    }

    bool set_ok = client.config_set("timeout", "30");
    println("Set timeout to 30: " + (set_ok ? "success" : "failed"));

    @config = client.config_get("timeout");
    string updated_timeout = "";
    if (config.exists("timeout")) {
        config.get("timeout", updated_timeout);
        println("Updated timeout: " + updated_timeout);
    }

    if (!original_timeout.empty()) {
        client.config_set("timeout", original_timeout);
        println("Restored original timeout: " + original_timeout);
    }

    bool reset = client.config_resetstat();
    println("Reset stats: " + (reset ? "success" : "failed"));

    array<string>@ clients = client.client_list();
    println("Client list count: " + clients.length());

    int64 my_id = client.client_id();
    println("My client ID: " + my_id);

    bool name_set = client.client_setname("NVGT_Test_Client");
    println("Set client name: " + (name_set ? "success" : "failed"));

    string my_name = client.client_getname();
    println("Client name: " + my_name);

    @clients = client.client_list();
    bool found_name = false;
    for (uint i = 0; i < clients.length(); i++) {
        if (clients[i].find("name=NVGT_Test_Client") != -1) {
            found_name = true;
            break;
        }
    }
    println("Found name in client list: " + (found_name ? "yes" : "no"));

    bool paused = client.client_pause(100);
    println("Client paused for 100ms: " + (paused ? "yes" : "no"));

    wait(150);

    string current_user = client.acl_whoami();
    println("ACL WHOAMI: " + current_user);

    array<string>@ acl_users = client.acl_list();
    println("ACL user count: " + acl_users.length());

    bool user_created = client.acl_setuser("testuser", "on >testpass ~test:* +get +set +del");
    println("ACL test user created: " + (user_created ? "yes" : "no"));

    if (user_created) {
        array<string>@ user_info = client.acl_getuser("testuser");
        println("ACL test user info count: " + user_info.length());

        bool user_deleted = client.acl_deluser("testuser");
        println("ACL test user deleted: " + (user_deleted ? "yes" : "no"));
    }

    @config = client.config_get("max*");
    println("Config keys starting with 'max': " + config.get_keys().length());

    @clients = client.client_list();
    if (clients.length() > 0) {
        string first_client = clients[0];
        println("First client info: " + first_client);
    }

    bool invalid_set = client.config_set("nonexistent_config", "value");
    println("Set nonexistent config: " + (invalid_set ? "success" : "failed"));

    invalid_set = client.config_set("timeout", "not_a_number");
    println("Set invalid timeout value: " + (invalid_set ? "success" : "failed"));

    client.disconnect();
    println("\nConfig test complete");
}
