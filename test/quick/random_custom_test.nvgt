// NonVisual Gaming Toolkit (NVGT)
// Copyright (C) 2022-2024 Sam Tupy
// License: zlib (see license.md in the root of the NVGT distribution)

// Test custom user-defined random generators

// Custom Linear Congruential Generator
class custom_lcg : random_generator {
    private uint state = 12345;
    
    uint next() {
        state = (state * 1103515245 + 12345) & 0x7fffffff;
        return state;
    }
    
    float nextf() {
        return float(next()) / 0x7fffffff;
    }
    
    int range(int min, int max) {
        if (min >= max) return min;
        return min + (next() % (max - min + 1));
    }
    
    bool next_bool(int percent = 50) {
        return range(0, 99) < percent;
    }
    
    string next_character(const string &in min, const string &in max) {
        if (min == "" || max == "") return "";
        if (min == max) return min;
        int minCode = character_to_ascii(min);
        int maxCode = character_to_ascii(max);
        return ascii_to_character(range(minCode, maxCode));
    }
    
    void seed(uint s) {
        state = s;
    }
}

// Custom XOR-based generator
class custom_xor : random_generator {
    private uint x = 123456789;
    private uint y = 362436069;
    private uint z = 521288629;
    private uint w = 88675123;
    
    uint next() {
        uint t = x ^ (x << 11);
        x = y; y = z; z = w;
        w = w ^ (w >> 19) ^ (t ^ (t >> 8));
        return w;
    }
    
    float nextf() {
        return float(next()) / 0xffffffff;
    }
    
    int range(int min, int max) {
        if (min >= max) return min;
        return min + (next() % (max - min + 1));
    }
    
    bool next_bool(int percent = 50) {
        return range(0, 99) < percent;
    }
    
    string next_character(const string &in min, const string &in max) {
        if (min == "" || max == "") return "";
        if (min == max) return min;
        int minCode = character_to_ascii(min);
        int maxCode = character_to_ascii(max);
        return ascii_to_character(range(minCode, maxCode));
    }
}

void main() {
    println("Testing Custom Random Generators");
    println("===============================");
    
    // Create custom generators
    custom_lcg@ lcg = @custom_lcg();
    custom_xor@ xor_gen = @custom_xor();
    
    println("\nTesting LCG generator:");
    println("Range(1,10): " + lcg.range(1, 10));
    println("Float: " + lcg.nextf());
    println("Bool(75%): " + lcg.next_bool(75));
    println("Character(a-z): " + lcg.next_character("a", "z"));
    
    println("\nTesting XOR generator:");
    println("Range(1,10): " + xor_gen.range(1, 10));
    println("Float: " + xor_gen.nextf());
    println("Bool(25%): " + xor_gen.next_bool(25));
    println("Character(0-9): " + xor_gen.next_character("0", "9"));
    
    // Test with arrays
    println("\nTesting with arrays:");
    string[] colors = {"red", "green", "blue", "yellow", "purple"};
    
    println("Using LCG with array:");
    println("Random color: " + colors.random(lcg));
    colors.shuffle(lcg);
    println("Shuffled: " + join(colors, ", "));
    
    println("\nUsing XOR with array:");
    int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    println("Random number: " + numbers.random(xor_gen));
    numbers.shuffle(xor_gen);
    string[] numStrings;
    for (uint i = 0; i < numbers.length(); i++)
        numStrings.insert_last("" + numbers[i]);
    println("Shuffled: " + join(numStrings, ", "));
    
    println("\nAll custom generator tests completed!");
}