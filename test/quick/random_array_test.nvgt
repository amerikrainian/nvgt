// NonVisual Gaming Toolkit (NVGT)
// Copyright (C) 2022-2024 Sam Tupy
// License: zlib (see license.md in the root of the NVGT distribution)

// Test array.random() method with the new interface system

void main() {
	println("Testing Array Random Methods");
	println("============================");
	
	// Create arrays of different types
	int[] numbers = {10, 20, 30, 40, 50};
	string[] fruits = {"apple", "banana", "orange", "grape", "mango"};
	double[] decimals = {1.5, 2.7, 3.9, 4.2, 5.8};
	
	// Test with default generator
	println("\nUsing default random generator:");
	println("Random number: " + numbers.random());
	println("Random fruit: " + fruits.random());
	println("Random decimal: " + decimals.random());
	
	// Test with specific generators
	random_pcg@ pcg = random_pcg();
	random_well@ well = random_well();
	
	println("\nUsing PCG generator:");
	pcg.seed(100);
	for (int i = 0; i < 3; i++) {
		println("  Number: " + numbers.random(pcg));
		println("  Fruit: " + fruits.random(pcg));
	}
	
	println("\nUsing WELL generator:");
	well.seed(200);
	for (int i = 0; i < 3; i++) {
		println("  Number: " + numbers.random(well));
		println("  Fruit: " + fruits.random(well));
	}
	
	// Test polymorphism
	println("\nTesting with base interface pointer:");
	random_interface@ rng = cast<random_interface>(random_xorshift());
	rng.seed(300);
	println("Random with interface: " + numbers.random(rng));
	println("Random with interface: " + fruits.random(rng));
	
	// Test empty array handling
	int[] empty;
	println("\nTesting empty array (should throw exception):");
	try {
		int value = empty.random();
		println("Empty int array returned: " + value + " (unexpected!)");
	} catch {
		println("Empty array correctly threw exception");
	}
	
	println("\nTest completed!");
}