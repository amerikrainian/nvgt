// NonVisual Gaming Toolkit (NVGT)
// Copyright (C) 2022-2024 Sam Tupy
// License: zlib (see license.md in the root of the NVGT distribution)

#pragma plugin redis

// This kind of fakes pipelining since poco doesn't have it
// Careful with semantics!
//
// The API is also pretty gross

void main() {
    redis_client@ client = redis_client();

    if (!client.connect()) {
        println("Failed to connect to Redis.");
        return;
    }

    for (int i = 0; i < 10; i++) {
        client.del("test:pipe:key" + i);
    }

    client.pipeline_begin();

    array<string> cmd;

    cmd.resize(0);
    cmd.insert_last("SET");
    cmd.insert_last("test:pipe:key1");
    cmd.insert_last("value1");
    client.pipeline_add(cmd);

    cmd.resize(0);
    cmd.insert_last("SET");
    cmd.insert_last("test:pipe:key2");
    cmd.insert_last("value2");
    client.pipeline_add(cmd);

    cmd.resize(0);
    cmd.insert_last("GET");
    cmd.insert_last("test:pipe:key1");
    client.pipeline_add(cmd);

    cmd.resize(0);
    cmd.insert_last("INCR");
    cmd.insert_last("test:pipe:counter");
    client.pipeline_add(cmd);

    array<redis_value@>@ results = client.pipeline_execute();

    if (results.length() >= 4) {
        println("Test 1 - SET 1: " + results[0].get_string());
        println("Test 1 - SET 2: " + results[1].get_string());
        println("Test 1 - GET: " + results[2].get_string());
        println("Test 1 - INCR: " + results[3].get_integer());
    }

    client.pipeline_begin();

    for (int i = 0; i < 100; i++) {
        cmd.resize(0);
        cmd.insert_last("SET");
        cmd.insert_last("test:pipe:bulk" + i);
        cmd.insert_last("value" + i);
        client.pipeline_add(cmd);
    }

    @results = client.pipeline_execute();
    println("Test 2 - Large pipeline result count: " + results.length());

    client.pipeline_begin();

    cmd.resize(0);
    cmd.insert_last("SET");
    cmd.insert_last("test:pipe:str");
    cmd.insert_last("hello");
    client.pipeline_add(cmd);

    cmd.resize(0);
    cmd.insert_last("APPEND");
    cmd.insert_last("test:pipe:str");
    cmd.insert_last(" world");
    client.pipeline_add(cmd);

    cmd.resize(0);
    cmd.insert_last("LPUSH");
    cmd.insert_last("test:pipe:list");
    cmd.insert_last("item1");
    client.pipeline_add(cmd);

    cmd.resize(0);
    cmd.insert_last("LPUSH");
    cmd.insert_last("test:pipe:list");
    cmd.insert_last("item2");
    client.pipeline_add(cmd);

    cmd.resize(0);
    cmd.insert_last("LLEN");
    cmd.insert_last("test:pipe:list");
    client.pipeline_add(cmd);

    cmd.resize(0);
    cmd.insert_last("HSET");
    cmd.insert_last("test:pipe:hash");
    cmd.insert_last("field1");
    cmd.insert_last("value1");
    client.pipeline_add(cmd);

    cmd.resize(0);
    cmd.insert_last("HGET");
    cmd.insert_last("test:pipe:hash");
    cmd.insert_last("field1");
    client.pipeline_add(cmd);

    @results = client.pipeline_execute();

    if (results.length() >= 7) {
        println("Test 3 - SET: " + results[0].get_string());
        println("Test 3 - APPEND: " + results[1].get_integer());
        println("Test 3 - LPUSH 1: " + results[2].get_integer());
        println("Test 3 - LPUSH 2: " + results[3].get_integer());
        println("Test 3 - LLEN: " + results[4].get_integer());
        println("Test 3 - HSET: " + results[5].get_integer());
        println("Test 3 - HGET: " + results[6].get_string());
    }

    client.pipeline_begin();

    cmd.resize(0);
    cmd.insert_last("SET");
    cmd.insert_last("test:pipe:valid");
    cmd.insert_last("ok");
    client.pipeline_add(cmd);

    cmd.resize(0);
    cmd.insert_last("SET");
    cmd.insert_last("test:pipe:invalid");
    client.pipeline_add(cmd);

    cmd.resize(0);
    cmd.insert_last("GET");
    cmd.insert_last("test:pipe:valid");
    client.pipeline_add(cmd);

    @results = client.pipeline_execute();

    if (results.length() >= 3) {
        println("Test 4 - Valid SET: " + results[0].get_string());
        if (results[1].is_error) {
            println("Test 4 - Error: " + results[1].get_string());
        }
        println("Test 4 - GET after error: " + results[2].get_string());
    }

    client.pipeline_begin();
    @results = client.pipeline_execute();
    println("Test 5 - Empty pipeline result count: " + results.length());

    client.pipeline_begin();

    cmd.resize(0);
    cmd.insert_last("MULTI");
    client.pipeline_add(cmd);

    cmd.resize(0);
    cmd.insert_last("INCR");
    cmd.insert_last("test:pipe:trans");
    client.pipeline_add(cmd);

    cmd.resize(0);
    cmd.insert_last("INCR");
    cmd.insert_last("test:pipe:trans");
    client.pipeline_add(cmd);

    cmd.resize(0);
    cmd.insert_last("EXEC");
    client.pipeline_add(cmd);

    @results = client.pipeline_execute();

    if (results.length() == 4 && results[3].is_array) {
        println("Test 6 - Transaction results:");
        array<redis_value@>@ tx = results[3].get_array();
        for (uint i = 0; i < tx.length(); i++) {
            if (tx[i].is_integer) {
                println("  Step " + i + ": " + tx[i].get_integer());
            }
        }
    }

    for (int i = 0; i < 100; i++) {
        client.del("test:pipe:bulk" + i);
    }
    client.del("test:pipe:key1");
    client.del("test:pipe:key2");
    client.del("test:pipe:counter");
    client.del("test:pipe:str");
    client.del("test:pipe:list");
    client.del("test:pipe:hash");
    client.del("test:pipe:valid");
    client.del("test:pipe:trans");

    client.disconnect();

    println("\nRedis pipelining test complete!");
}
