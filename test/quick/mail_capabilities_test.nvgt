// NonVisual Gaming Toolkit (NVGT)
// Copyright (C) 2022-2024 Sam Tupy
// License: zlib (see license.md in the root of the NVGT distribution)

void main() {
    // Configuration - edit username and password
    string smtp_server = "smtp.gmail.com";
    int smtp_port = 587;
    string username = "edit@me.please";
    string password = "Something you should edit";
    string from_email = username;
    string to_email = username;
    
    smtp_client@ client = smtp_client();
    client.host = smtp_server;
    client.port = smtp_port;
    client.use_ssl = true;
    client.set_timeout(20000); // 20 second timeout
    
    println("Connecting to " + smtp_server + ":" + smtp_port + "...");
    println("Timeout set to: " + client.timeout + " ms");
    
    if (!client.connect()) {
        println("Failed to connect: " + client.last_error);
        return;
    }
    println("Connected successfully!");
    println("Connection status: " + (client.is_connected ? "connected" : "not connected"));
    
    println("\nQuerying server capabilities...");
    string capabilities = client.query_server_capabilities();
    if (!capabilities.empty()) {
        println("Server capabilities response:");
        println(capabilities);
    } else {
        println("Failed to query capabilities: " + client.last_error);
    }
    
    println("\nAuthenticating as " + username + "...");
    if (!client.login(username, password)) {
        println("Authentication failed: " + client.last_error);
        client.close();
        return;
    }
    println("Authenticated successfully!");
    println("Authentication status: " + (client.is_authenticated ? "authenticated" : "not authenticated"));
    
    mail_message@ msg = mail_message();
    msg.set_sender(from_email);
    msg.add_recipient(to_email);
    msg.set_subject("Test: Enhanced Mail Features");
    
    msg.set_in_reply_to("<previous-message@nvgt.test>");
    msg.set_references("<thread-start@nvgt.test> <previous-message@nvgt.test>");
    
    msg.set_return_receipt_to(from_email);
    msg.set_disposition_notification_to(from_email);
    
    string content = "This is a test of the enhanced mail features:\n\n";
    content += "1. Message threading (In-Reply-To and References headers)\n";
    content += "2. Delivery Status Notifications\n";
    content += "3. Connection status tracking\n";
    content += "4. Server capabilities query\n";
    content += "5. Timeout configuration\n\n";
    content += "Sent at: " + TIME_SYSTEM_RUNNING_MILLISECONDS + " ms since start\n";
    msg.set_content(content);
    
    println("\nSending test message...");
    if (!client.send_message(msg)) {
        println("Failed to send message: " + client.last_error);
        client.close();
        return;
    }
    println("Message sent successfully!");
    
    println("\nTesting batch sending...");
    array<mail_message@> batch_messages;
    
    for (int i = 1; i <= 3; i++) {
        mail_message@ batch_msg = mail_message();
        batch_msg.set_sender(from_email);
        batch_msg.add_recipient(to_email);
        batch_msg.set_subject("Batch Test Message " + i + " of 3");
        batch_msg.set_content("This is batch message number " + i + " sent using the new batch sending feature.");
        
        if (i > 1) {
            batch_msg.set_in_reply_to("<batch-message-" + (i-1) + "@nvgt.test>");
            batch_msg.set_references("<batch-message-1@nvgt.test>");
            if (i > 2) {
                batch_msg.set_references(batch_msg.references + " <batch-message-2@nvgt.test>");
            }
        }
        
        batch_messages.insert_last(batch_msg);
    }
    
    if (client.send_messages(batch_messages)) {
        println("Batch of " + batch_messages.length() + " messages sent successfully!");
    } else {
        println("Failed to send batch: " + client.last_error);
    }
    
    client.close();
    println("\nConnection closed.");
    println("Final connection status: " + (client.is_connected ? "connected" : "not connected"));

    println("\n\nEmail Validation Tests:");
    println("----------------------");
    string[] test_emails = {
        username,
        "valid@example.com",
        "invalid@",
        "@invalid.com",
        "no-at-sign",
        "spaces in@email.com"
    };
    
    for (uint i = 0; i < test_emails.length(); i++) {
        bool valid = validate_email_address(test_emails[i]);
        println(test_emails[i] + ": " + (valid ? "VALID" : "INVALID"));
    }
    
    println("\nAll tests completed!");
}