// NonVisual Gaming Toolkit (NVGT)
// Copyright (C) 2022-2024 Sam Tupy
// License: zlib (see license.md in the root of the NVGT distribution)

#pragma plugin redis

void main() {
    redis_client@ client = redis_client();

    if (!client.connect()) {
        println("Failed to connect to Redis.");
        return;
    }

    client.del("test:geo:cities");
    println("Deleted key test:geo:cities");

    int64 added = client.geoadd("test:geo:cities", -122.4194, 37.7749, "San Francisco");
    println("Added San Francisco: " + added);

    added = client.geoadd("test:geo:cities", -73.935242, 40.730610, "New York");
    println("Added New York: " + added);

    added = client.geoadd("test:geo:cities", -118.2437, 34.0522, "Los Angeles");
    println("Added Los Angeles: " + added);

    added = client.geoadd("test:geo:cities", -87.6298, 41.8781, "Chicago");
    println("Added Chicago: " + added);

    array<string> members;
    members.insert_last("San Francisco");
    members.insert_last("New York");
    members.insert_last("NonExistent");

    array<array<double>@>@ positions = client.geopos("test:geo:cities", members);
    for (uint i = 0; i < members.length(); ++i) {
        if (positions[i] !is null && positions[i].length() == 2) {
            println("Position of " + members[i] + ": " + positions[i][0] + ", " + positions[i][1]);
        } else {
            println("Position of " + members[i] + ": not found");
        }
    }

    double distance = client.geodist("test:geo:cities", "San Francisco", "Los Angeles", "km");
    println("Distance San Francisco ↔ Los Angeles: " + distance + " km");

    distance = client.geodist("test:geo:cities", "New York", "Chicago", "mi");
    println("Distance New York ↔ Chicago: " + distance + " mi");

    array<string>@ nearby = client.georadius("test:geo:cities", -118.0, 34.0, 100, "km");
    println("Cities within 100km of (-118, 34): " + nearby.length());
    for (uint i = 0; i < nearby.length(); ++i) {
        println("Nearby: " + nearby[i]);
    }

    @nearby = client.georadius("test:geo:cities", -122.0, 37.5, 200, "km", false, true, false, 3);
    println("Cities within 200km of (-122, 37.5) with distance:");
    for (uint i = 0; i < nearby.length(); ++i) {
        println("Nearby: " + nearby[i]);
    }

    @nearby = client.georadiusbymember("test:geo:cities", "Chicago", 800, "mi");
    println("Cities within 800mi of Chicago:");
    for (uint i = 0; i < nearby.length(); ++i) {
        println("Nearby: " + nearby[i]);
    }

    string hash = client.geohash("test:geo:cities", "San Francisco");
    println("Geohash of San Francisco: " + hash);

    @nearby = client.georadius("test:geo:cities", -100.0, 40.0, 1500, "km", true, true, false, 10);
    println("Cities within 1500km of (-100, 40) with coords and distances:");
    for (uint i = 0; i < nearby.length(); ++i) {
        println("Nearby: " + nearby[i]);
    }

    client.geoadd("test:geo:cities", 2.3522, 48.8566, "Paris");
    client.geoadd("test:geo:cities", -0.1278, 51.5074, "London");
    client.geoadd("test:geo:cities", 139.6917, 35.6895, "Tokyo");
    client.geoadd("test:geo:cities", 116.4074, 39.9042, "Beijing");
    println("Added Paris, London, Tokyo, Beijing");

    @nearby = client.georadius("test:geo:cities", 10.0, 50.0, 1000, "km");
    println("Cities within 1000km of (10, 50):");
    for (uint i = 0; i < nearby.length(); ++i) {
        println("Nearby: " + nearby[i]);
    }

    @nearby = client.georadius("test:geo:cities", 139.6917, 35.6895, 20000, "km", false, true);
    println("Cities within 20000km of Tokyo with distance:");
    for (uint i = 0; i < nearby.length(); ++i) {
        println("Nearby: " + nearby[i]);
    }

    client.del("test:geo:cities");
    println("Cleaned up test:geo:cities");

    client.disconnect();
    println("\nGeo test complete!");
}
