// NonVisual Gaming Toolkit (NVGT)
// Copyright (C) 2022-2024 Sam Tupy
// License: zlib (see license.md in the root of the NVGT distribution)

#pragma plugin redis

void main() {
    redis_client@ client = redis_client();

    if (!client.connect()) {
        println("Failed to connect: " + client.last_error);
        return;
    }

    int[] test_sizes = {100, 1024, 4096, 16384, 65536, 262144, 524288, 1048576};

    for (uint i = 0; i < test_sizes.length(); i++) {
        int size = test_sizes[i];
        string test_data = "";
    
        // Create test data with a pattern
        for (int j = 0; j < size; j++) {
            test_data += string(65 + (j % 26)); // A-Z pattern
        }

        string key = "test_" + size;
    
        if (!client.set(key, test_data)) {
            println("Failed to set " + key + ": " + client.last_error);
            continue;
        }

        string retrieved = client.get(key);
        if (client.last_error != "") {
            println("Failed to get " + key + ": " + client.last_error);
            continue;
        }

        if (retrieved.length() != test_data.length()) {
            println("ERROR: Size " + size + " - length mismatch! Expected " + test_data.length() + ", got " + retrieved.length());
        } else {
            bool matches = true;
            for (int j = 0; j < test_data.length(); j++) {
                if (retrieved[j] != test_data[j]) {
                    println("ERROR: Size " + size + " - data mismatch at position " + j);
                    matches = false;
                    break;
                }
            }
            if (matches) {
                println("OK: Size " + size + " bytes - passed");
            }
        }

        client.del(key);
    }

    client.disconnect();
    println("\nRedis Partial Read Test complete");
}