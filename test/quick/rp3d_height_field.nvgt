void main() {
    physics_world_settings settings;
    settings.world_name = "Height Field World";
    physics_world@ world = physics_world(settings);

    // Create a 4x4 grid of height values (16 total values)
    // Heights represent a small hill in the center
    float[] floatHeights = {
        0.0f, 0.1f, 0.1f, 0.0f,  // Row 0
        0.1f, 0.5f, 0.5f, 0.1f,  // Row 1
        0.1f, 0.5f, 0.5f, 0.1f,  // Row 2
        0.0f, 0.1f, 0.1f, 0.0f   // Row 3
    };

    int columns = 4;
    int rows = 4;

    physics_height_field@ floatField = physics_height_field_create(columns, rows, floatHeights);
    println("Created float height field - Columns: " + floatField.nb_columns + ", Rows: " + floatField.nb_rows);
    println("Min height: " + floatField.min_height + ", Max height: " + floatField.max_height);

    // Create height field shape
    vector scaling(2.0f, 1.0f, 2.0f);  // Scale X and Z by 2, keep Y as 1
    physics_height_field_shape@ floatShape = physics_height_field_shape(floatField, scaling);

    physics_transform transform;
    transform.position = vector(0, -2, 0);  // Place below origin
    physics_rigid_body@ terrainBody = world.create_rigid_body(transform);
    terrainBody.type = PHYSICS_BODY_STATIC;  // Terrain should be static

    physics_collider@ terrainCollider = terrainBody.add_collider(floatShape, physics_transform());
    println("Added height field to terrain body");

    println("Sample vertex at (0,0): " + floatField.get_vertex_at(0, 0).x + "," + floatField.get_vertex_at(0, 0).y + "," + floatField.get_vertex_at(0, 0).z);
    println("Sample vertex at (1,1): " + floatField.get_vertex_at(1, 1).x + "," + floatField.get_vertex_at(1, 1).y + "," + floatField.get_vertex_at(1, 1).z);

    // Create integer height data (will be scaled by integerHeightScale)
    int[] intHeights = {
        0, 5, 10, 5, 0,
        5, 15, 25, 15, 5,
        10, 25, 40, 25, 10,
        5, 15, 25, 15, 5,
        0, 5, 10, 5, 0
    };

    float integerScale = 0.1f;  // Each integer unit = 0.1 world units
    physics_height_field@ intField = physics_height_field_create(5, 5, intHeights, integerScale);
    println("Created integer height field - Columns: " + intField.nb_columns + ", Rows: " + intField.nb_rows);
    println("Integer height scale: " + intField.integer_height_scale);
    println("Min height: " + intField.min_height + ", Max height: " + intField.max_height);

    physics_height_field_shape@ intShape = physics_height_field_shape(intField);

    double[] doubleHeights = {
        0.0, 0.25, 0.0,
        0.25, 1.0, 0.25,
        0.0, 0.25, 0.0
    };

    physics_height_field@ doubleField = physics_height_field_create(3, 3, doubleHeights);
    println("Created double height field - Columns: " + doubleField.nb_columns + ", Rows: " + doubleField.nb_rows);
    println("Data type: " + doubleField.height_data_type);

    for (int row = 0; row < 3; row++) {
        for (int col = 0; col < 3; col++) {
            float height = doubleField.get_height_at(col, row);
            println("Height at (" + col + "," + row + "): " + height);
        }
    }

    aabb bounds = doubleField.bounds;
    println("Height field bounds - Min: " + bounds.min.x + "," + bounds.min.y + "," + bounds.min.z);
    println("Height field bounds - Max: " + bounds.max.x + "," + bounds.max.y + "," + bounds.max.z);

    physics_transform dynamicTransform;
    dynamicTransform.position = vector(0, 5, 0);  // Start above terrain
    physics_rigid_body@ dynamicBody = world.create_rigid_body(dynamicTransform);
    dynamicBody.type = PHYSICS_BODY_DYNAMIC;

    physics_sphere_shape@ sphere = physics_sphere_shape(0.5f);
    physics_collider@ sphereCollider = dynamicBody.add_collider(sphere, physics_transform());

    println("Created dynamic sphere body above terrain");

    println("Float height shape type: " + floatShape.type);
    println("Float height shape name: " + floatShape.name);
    println("Is convex: " + floatShape.is_convex);
    println("Is polyhedron: " + floatShape.is_polyhedron);
    println("Volume: " + floatShape.volume);

    println("Raycast test type: " + floatShape.raycast_test_type);
    floatShape.raycast_test_type = TRIANGLE_RAYCAST_SIDE_FRONT_AND_BACK;
    println("Updated raycast test type: " + floatShape.raycast_test_type);

    // Try to create with mismatched dimensions
    float[] badHeights = { 1.0f, 2.0f, 3.0f };  // Only 3 values
    try {
        physics_height_field@ badField = physics_height_field_create(4, 4, badHeights);  // Expects 16 values
        println("ERROR: Should have failed!");
    } catch {
        println("Correctly caught dimension mismatch error");
    }

    aabb terrainAABB = terrainBody.aabb;
    println("Terrain body AABB - Min: " + terrainAABB.min.x + "," + terrainAABB.min.y + "," + terrainAABB.min.z);
    println("Terrain body AABB - Max: " + terrainAABB.max.x + "," + terrainAABB.max.y + "," + terrainAABB.max.z);

    bool overlaps = terrainBody.test_aabb_overlap(dynamicBody.aabb);
    println("Terrain overlaps with sphere: " + overlaps);

    // Bodies must go first; they own stuff like colliders and reference shapes
    world.destroy_rigid_body(terrainBody);
    world.destroy_rigid_body(dynamicBody);

    // Destroy shapes (after bodies that reference them are gone)
    physics_sphere_shape_destroy(sphere);
    physics_height_field_shape_destroy(floatShape);
    physics_height_field_shape_destroy(intShape);

    // Destroy height fields (after height field shapes are destroyed)
    physics_height_field_destroy(floatField);
    physics_height_field_destroy(intField);
    physics_height_field_destroy(doubleField);

    // Destroy the physics world
    physics_world_destroy(world);
}