// NonVisual Gaming Toolkit (NVGT)
// Copyright (C) 2022-2024 Sam Tupy
// License: zlib (see license.md in the root of the NVGT distribution)

#pragma plugin redis

void main() {
    redis_client@ client = redis_client();

    if (!client.connect()) {
        println("Failed to connect: " + client.last_error);
        return;
    }
    println("Connected to Redis");

    string large_data = "";
    for (int i = 0; i < 1024 * 1024; i++) {
        large_data += "A";
    }

    println("Testing with " + large_data.length() + " bytes of data");

    if (client.set("large_key", large_data)) {
        println("SET large_key - OK");
    } else {
        println("Failed to set large value: " + client.last_error);
        return;
    }

    string retrieved = client.get("large_key");
    if (client.last_error != "") {
        println("Failed to get large value: " + client.last_error);
        return;
    }

    println("Retrieved " + retrieved.length() + " bytes");

    if (retrieved.length() != large_data.length()) {
        println("ERROR: Length mismatch! Expected " + large_data.length() + " bytes, got " + retrieved.length() + " bytes");
        return;
    }

    bool data_matches = true;
    for (int i = 0; i < retrieved.length(); i++) {
        if (retrieved[i] != large_data[i]) {
            data_matches = false;
            println("ERROR: Data differs at position " + i);
            println("Expected: " + large_data[i] + ", Got: " + retrieved[i]);
            break;
        }
    }

    if (data_matches) {
        println("SUCCESS: Large data test passed! Successfully stored and retrieved " + large_data.length() + " bytes");
    }

    if (client.del("large_key")) {
        println("Cleaned up test key");
    }

    client.disconnect();
    println("\nRedis large data test complete");
}