// NonVisual Gaming Toolkit (NVGT)
// Copyright (C) 2022-2024 Sam Tupy
// License: zlib (see license.md in the root of the NVGT distribution)

#pragma plugin redis

void main() {
    test_publish_no_subscribers();

    test_full_pubsub();

    println("Redis Pub/Sub tests complete!");
}

void test_publish_no_subscribers() {
    redis_client@ client = redis_client();

    if (!client.connect()) {
        println("Failed to connect: " + client.last_error);
        return;
    }
    
    int64 receivers = client.publish("test:pubsub:channel1", "Message to nobody");
    println("Published to channel with no subscribers: " + receivers + " receivers");

    client.disconnect();
}

void test_full_pubsub() {
    blocking_redis_subscriber@ subscriber = blocking_redis_subscriber();

    subscriber.host = "localhost";
    subscriber.port = 6379;

    array<string> channels;
    channels.insert_last("test:pubsub:news");
    channels.insert_last("test:pubsub:alerts");
    channels.insert_last("test:pubsub:updates");

    if (!subscriber.subscribe(channels)) {
        println("Failed to subscribe: " + subscriber.last_error);
        return;
    }

    println("Subscriber started, is_running = " + subscriber.is_running);

    // Wait a moment for subscriber to establish connection
    wait(200);

    redis_client@ publisher = redis_client();

    if (!publisher.connect()) {
        println("Failed to connect publisher: " + publisher.last_error);
        subscriber.stop();
        return;
    }

    println("\nPublishing messages...");

    int64 count = publisher.publish("test:pubsub:news", "Breaking news: Redis wrapper sucks!");
    println("Published to 'news' channel: " + count + " subscribers");

    count = publisher.publish("test:pubsub:alerts", "Alert: All systems operational");
    println("Published to 'alerts' channel: " + count + " subscribers");

    count = publisher.publish("test:pubsub:updates", "Update: Version 1.0 released");
    println("Published to 'updates' channel: " + count + " subscribers");

    publisher.publish("test:pubsub:news", "Second news item");
    publisher.publish("test:pubsub:news", "Third news item");

    count = publisher.publish("test:pubsub:other", "Message to non-subscribed channel");
    println("Published to non-subscribed channel: " + count + " subscribers");

    wait(200);

    println("\nRetrieving messages...");

    if (subscriber.has_messages("test:pubsub:news")) {
        array<string>@ news_messages = subscriber.get_messages("test:pubsub:news");
        println("\nNews channel (" + news_messages.length() + " messages):");
        for (uint i = 0; i < news_messages.length(); i++) {
            println("  [" + i + "] " + news_messages[i]);
        }
    }

    if (subscriber.has_messages("test:pubsub:alerts")) {
        array<string>@ alert_messages = subscriber.get_messages("test:pubsub:alerts");
        println("\nAlerts channel (" + alert_messages.length() + " messages):");
        for (uint i = 0; i < alert_messages.length(); i++) {
            println("  [" + i + "] " + alert_messages[i]);
        }
    }

    if (subscriber.has_messages("test:pubsub:updates")) {
        array<string>@ update_messages = subscriber.get_messages("test:pubsub:updates");
        println("\nUpdates channel (" + update_messages.length() + " messages):");
        for (uint i = 0; i < update_messages.length(); i++) {
            println("  [" + i + "] " + update_messages[i]);
        }
    }

    bool has_other = subscriber.has_messages("test:pubsub:other");
    println("\nHas messages for non-subscribed channel: " + has_other);

    publisher.publish("test:pubsub:news", "Final news item");
    wait(100);

    array<string>@ first_get = subscriber.get_messages("test:pubsub:news");
    println("First get_messages: " + first_get.length() + " messages");

    array<string>@ second_get = subscriber.get_messages("test:pubsub:news");
    println("Second get_messages: " + second_get.length() + " messages (should be 0)");

    println("\nStopping subscriber...");
    subscriber.stop();
    println("Subscriber stopped, is_running = " + subscriber.is_running);

    publisher.disconnect();
}