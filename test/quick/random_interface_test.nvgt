// NonVisual Gaming Toolkit (NVGT)
// Copyright (C) 2022-2024 Sam Tupy
// License: zlib (see license.md in the root of the NVGT distribution)

// Test the new random interface system with multiple RNG types

void main() {
	println("Testing Random Interface System");
	println("==============================");
	
	// Test creating different types of random generators
	random_pcg@ pcg = random_pcg();
	random_well@ well = random_well();
	random_gamerand@ gamerand = random_gamerand();
	random_xorshift@ xorshift = random_xorshift();
	
	println("\nTesting random int generation (range 1-10):");
	println("PCG: " + pcg.range(1, 10));
	println("WELL: " + well.range(1, 10));
	println("Gamerand: " + gamerand.range(1, 10));
	println("Xorshift: " + xorshift.range(1, 10));
	
	println("\nTesting random float generation (range 0.0-1.0):");
	println("PCG: " + pcg.nextf());
	println("WELL: " + well.nextf());
	println("Gamerand: " + gamerand.nextf());
	println("Xorshift: " + xorshift.nextf());
	
	println("\nTesting next() for raw uint values:");
	println("PCG: " + pcg.next());
	println("WELL: " + well.next());
	println("Gamerand: " + gamerand.next());
	println("Xorshift: " + xorshift.next());
	
	println("\nTesting seeding:");
	pcg.seed(12345);
	well.seed(12345);
	gamerand.seed(12345);
	xorshift.seed(12345);
	
	println("After seeding with 12345:");
	println("PCG: " + pcg.range(1, 100));
	println("WELL: " + well.range(1, 100));
	println("Gamerand: " + gamerand.range(1, 100));
	println("Xorshift: " + xorshift.range(1, 100));
	
	// Test that the generators work with their native types
	println("\nTesting that generators work properly:");
	println("PCG next_bool: " + pcg.next_bool(75));
	println("WELL next_bool: " + well.next_bool(25));
	println("Gamerand next_character: " + gamerand.next_character("a", "z"));
	println("Xorshift next_character: " + xorshift.next_character("0", "9"));
	
	// Test casting to interface
	println("\nTesting interface casting:");
	random_interface@ pcg_interface = pcg;
	if (pcg_interface !is null) {
		println("PCG can be cast to random_interface");
		println("Interface PCG range(1,10): " + pcg_interface.range(1, 10));
		println("Interface PCG nextf(): " + pcg_interface.nextf());
	} else {
		println("PCG cannot be cast to random_interface");
	}
	
	// Test default random interface
	println("\nTesting default random interface:");
	random_interface@ default_rng = get_default_random();
	if (default_rng !is null) {
		println("Default random range(1,100): " + default_rng.range(1, 100));
		println("Default random nextf(): " + default_rng.nextf());
		
		// Test setting a different generator as default
		set_default_random(well);
		random_interface@ new_default = get_default_random();
		println("After setting WELL as default:");
		println("New default range(1,100): " + new_default.range(1, 100));
	} else {
		println("Default random interface is null");
	}
	
	println("\nAll tests completed!");
}