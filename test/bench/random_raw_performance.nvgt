// Benchmark for raw random number generation performance

void bench_next_raw() {
	println("Benchmarking raw next() performance (1M calls)");
	
	// PCG
	random_pcg pcg;
	timer t1(0, 1);
	for (int i = 0; i < 1000000; i++)
		pcg.next();
	t1.pause();
	float pcg_time = float(t1.elapsed);
	println("PCG next(): " + pcg_time + "us (" + (pcg_time * 1000.0 / 1000000.0) + " ns per call)");
	
	// WELL
	random_well well;
	timer t2(0, 1);
	for (int i = 0; i < 1000000; i++)
		well.next();
	t2.pause();
	float well_time = float(t2.elapsed);
	println("WELL next(): " + well_time + "us (" + (well_time * 1000.0 / 1000000.0) + " ns per call)");
	
	// Gamerand
	random_gamerand gamerand;
	timer t3(0, 1);
	for (int i = 0; i < 1000000; i++)
		gamerand.next();
	t3.pause();
	float gamerand_time = float(t3.elapsed);
	println("Gamerand next(): " + gamerand_time + "us (" + (gamerand_time * 1000.0 / 1000000.0) + " ns per call)");
	
	// Xorshift
	random_xorshift xorshift;
	timer t4(0, 1);
	for (int i = 0; i < 1000000; i++)
		xorshift.next();
	t4.pause();
	float xorshift_time = float(t4.elapsed);
	println("Xorshift next(): " + xorshift_time + "us (" + (xorshift_time * 1000.0 / 1000000.0) + " ns per call)");
}

void bench_parallel_generators() {
	println("\nBenchmarking parallel generator usage");
	
	// Create multiple generators
	random_pcg@[] pcg_array;
	random_well@[] well_array;
	random_gamerand@[] gamerand_array;
	random_xorshift@[] xorshift_array;
	
	for (int i = 0; i < 10; i++) {
		pcg_array.insert_last(random_pcg(i));
		well_array.insert_last(random_well(i));
		gamerand_array.insert_last(random_gamerand(i));
		xorshift_array.insert_last(random_xorshift(uint(i)));
	}
	
	// Benchmark using multiple generators in sequence
	timer t1(0, 1);
	for (int i = 0; i < 100000; i++) {
		for (int j = 0; j < 10; j++)
			pcg_array[j].range(1, 100);
	}
	t1.pause();
	println("10 PCG generators: " + float(t1.elapsed) + "us for 1M total calls");
	
	timer t2(0, 1);
	for (int i = 0; i < 100000; i++) {
		for (int j = 0; j < 10; j++)
			well_array[j].range(1, 100);
	}
	t2.pause();
	println("10 WELL generators: " + float(t2.elapsed) + "us for 1M total calls");
	
	timer t3(0, 1);
	for (int i = 0; i < 100000; i++) {
		for (int j = 0; j < 10; j++)
			gamerand_array[j].range(1, 100);
	}
	t3.pause();
	println("10 Gamerand generators: " + float(t3.elapsed) + "us for 1M total calls");
	
	timer t4(0, 1);
	for (int i = 0; i < 100000; i++) {
		for (int j = 0; j < 10; j++)
			xorshift_array[j].range(1, 100);
	}
	t4.pause();
	println("10 Xorshift generators: " + float(t4.elapsed) + "us for 1M total calls");
}

void bench_mixed_operations() {
	println("\nBenchmarking mixed operations");
	
	random_pcg pcg;
	random_well well;
	random_gamerand gamerand;
	random_xorshift xorshift;
	
	// Simulate real-world usage with mixed operations
	timer t1(0, 1);
	for (int i = 0; i < 100000; i++) {
		pcg.range(1, 100);
		pcg.nextf();
		pcg.next_bool(70);
		if (i % 100 == 0)
			pcg.seed(i);
	}
	t1.pause();
	println("PCG mixed ops: " + float(t1.elapsed) + "us for 100k iterations");
	
	timer t2(0, 1);
	for (int i = 0; i < 100000; i++) {
		well.range(1, 100);
		well.nextf();
		well.next_bool(70);
		if (i % 100 == 0)
			well.seed(i);
	}
	t2.pause();
	println("WELL mixed ops: " + float(t2.elapsed) + "us for 100k iterations");
	
	timer t3(0, 1);
	for (int i = 0; i < 100000; i++) {
		gamerand.range(1, 100);
		gamerand.nextf();
		gamerand.next_bool(70);
		if (i % 100 == 0)
			gamerand.seed(i);
	}
	t3.pause();
	println("Gamerand mixed ops: " + float(t3.elapsed) + "us for 100k iterations");
	
	timer t4(0, 1);
	for (int i = 0; i < 100000; i++) {
		xorshift.range(1, 100);
		xorshift.nextf();
		xorshift.next_bool(70);
		if (i % 100 == 0)
			xorshift.seed(i);
	}
	t4.pause();
	println("Xorshift mixed ops: " + float(t4.elapsed) + "us for 100k iterations");
}

void bench_creation_destruction() {
	println("\nBenchmarking generator creation/destruction");
	
	// PCG
	timer t1(0, 1);
	for (int i = 0; i < 10000; i++) {
		random_pcg@ pcg = random_pcg();
		pcg.next();
	}
	t1.pause();
	println("PCG create/destroy: " + float(t1.elapsed) + "us for 10k operations");
	
	// WELL
	timer t2(0, 1);
	for (int i = 0; i < 10000; i++) {
		random_well@ well = random_well();
		well.next();
	}
	t2.pause();
	println("WELL create/destroy: " + float(t2.elapsed) + "us for 10k operations");
	
	// Gamerand
	timer t3(0, 1);
	for (int i = 0; i < 10000; i++) {
		random_gamerand@ gamerand = random_gamerand();
		gamerand.next();
	}
	t3.pause();
	println("Gamerand create/destroy: " + float(t3.elapsed) + "us for 10k operations");
	
	// Xorshift
	timer t4(0, 1);
	for (int i = 0; i < 10000; i++) {
		random_xorshift@ xorshift = random_xorshift();
		xorshift.next();
	}
	t4.pause();
	println("Xorshift create/destroy: " + float(t4.elapsed) + "us for 10k operations");
}

void main() {
	println("Random Raw Performance Benchmarks");
	println("=================================");
	
	// Warm up
	println("Warming up the JIT...");
	random_pcg warmup;
	for (int i = 0; i < 100000; i++)
		warmup.next();
	
	bench_next_raw();
	bench_parallel_generators();
	bench_mixed_operations();
	bench_creation_destruction();
	
	println("\nBenchmarks completed!");
}