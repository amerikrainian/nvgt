// Benchmark for random number generator quality and distribution
// Todo: Check math

void bench_distribution_uniformity() {
	println("Testing distribution uniformity (Chi-square test approximation)");
	const int buckets = 100;
	const int samples = 1000000;
	const float expected = float(samples) / float(buckets);
	
	// PCG
	random_pcg pcg;
	int[] pcg_counts(buckets);
	timer t1(0, 1);
	for (int i = 0; i < samples; i++) {
		int bucket = pcg.range(0, buckets - 1);
		pcg_counts[bucket]++;
	}
	t1.pause();
	
	float pcg_chi = 0.0;
	for (int i = 0; i < buckets; i++) {
		float diff = pcg_counts[i] - expected;
		pcg_chi += (diff * diff) / expected;
	}
	println("PCG: chi-square=%0, time=%1us".format(pcg_chi, float(t1.elapsed)));
	
	// WELL
	random_well well;
	int[] well_counts(buckets);
	timer t2(0, 1);
	for (int i = 0; i < samples; i++) {
		int bucket = well.range(0, buckets - 1);
		well_counts[bucket]++;
	}
	t2.pause();
	
	float well_chi = 0.0;
	for (int i = 0; i < buckets; i++) {
		float diff = well_counts[i] - expected;
		well_chi += (diff * diff) / expected;
	}
	println("WELL: chi-square=%0, time=%1us".format(well_chi, float(t2.elapsed)));
	
	// Gamerand
	random_gamerand gamerand;
	int[] gamerand_counts(buckets);
	timer t3(0, 1);
	for (int i = 0; i < samples; i++) {
		int bucket = gamerand.range(0, buckets - 1);
		gamerand_counts[bucket]++;
	}
	t3.pause();
	
	float gamerand_chi = 0.0;
	for (int i = 0; i < buckets; i++) {
		float diff = gamerand_counts[i] - expected;
		gamerand_chi += (diff * diff) / expected;
	}
	println("Gamerand: chi-square=%0, time=%1us".format(gamerand_chi, float(t3.elapsed)));
	
	// Xorshift
	random_xorshift xorshift;
	int[] xorshift_counts(buckets);
	timer t4(0, 1);
	for (int i = 0; i < samples; i++) {
		int bucket = xorshift.range(0, buckets - 1);
		xorshift_counts[bucket]++;
	}
	t4.pause();
	
	float xorshift_chi = 0.0;
	for (int i = 0; i < buckets; i++) {
		float diff = xorshift_counts[i] - expected;
		xorshift_chi += (diff * diff) / expected;
	}
	println("Xorshift: chi-square=%0, time=%1us".format(xorshift_chi, float(t4.elapsed)));
	
	println("(Lower chi-square values indicate better uniformity)");
}

void bench_bool_bias() {
	println("\nTesting boolean generation bias");
	const int samples = 1000000;
	
	// Test 50% probability
	println("Testing 50% probability:");
	
	random_pcg pcg;
	int pcg_true = 0;
	timer t1(0, 1);
	for (int i = 0; i < samples; i++) {
		if (pcg.next_bool(50))
			pcg_true++;
	}
	t1.pause();
	float pcg_percent = (float(pcg_true) / float(samples)) * 100.0;
	println("PCG: %0%% true (expected 50%%), time=%1us".format(pcg_percent, float(t1.elapsed)));
	
	random_well well;
	int well_true = 0;
	timer t2(0, 1);
	for (int i = 0; i < samples; i++) {
		if (well.next_bool(50))
			well_true++;
	}
	t2.pause();
	float well_percent = (float(well_true) / float(samples)) * 100.0;
	println("WELL: %0%% true (expected 50%%), time=%1us".format(well_percent, float(t2.elapsed)));
	
	random_gamerand gamerand;
	int gamerand_true = 0;
	timer t3(0, 1);
	for (int i = 0; i < samples; i++) {
		if (gamerand.next_bool(50))
			gamerand_true++;
	}
	t3.pause();
	float gamerand_percent = (float(gamerand_true) / float(samples)) * 100.0;
	println("Gamerand: %0%% true (expected 50%%), time=%1us".format(gamerand_percent, float(t3.elapsed)));
	
	random_xorshift xorshift;
	int xorshift_true = 0;
	timer t4(0, 1);
	for (int i = 0; i < samples; i++) {
		if (xorshift.next_bool(50))
			xorshift_true++;
	}
	t4.pause();
	float xorshift_percent = (float(xorshift_true) / float(samples)) * 100.0;
	println("Xorshift: %0%% true (expected 50%%), time=%1us".format(xorshift_percent, float(t4.elapsed)));
}

void bench_sequence_independence() {
	println("\nTesting sequence independence (consecutive values)");
	const int samples = 100000;
	
	// Check how often consecutive values are within 10% of each other
	random_pcg pcg;
	int pcg_close = 0;
	timer t1(0, 1);
	int prev_pcg = pcg.range(1, 1000);
	for (int i = 0; i < samples; i++) {
		int curr = pcg.range(1, 1000);
		if (abs(curr - prev_pcg) < 100)  // Within 10%
			pcg_close++;
		prev_pcg = curr;
	}
	t1.pause();
	float pcg_close_percent = (float(pcg_close) / float(samples)) * 100.0;
	println("PCG: %0%% consecutive values within 10%%, time=%1us".format(pcg_close_percent, float(t1.elapsed)));
	
	random_well well;
	int well_close = 0;
	timer t2(0, 1);
	int prev_well = well.range(1, 1000);
	for (int i = 0; i < samples; i++) {
		int curr = well.range(1, 1000);
		if (abs(curr - prev_well) < 100)  // Within 10%
			well_close++;
		prev_well = curr;
	}
	t2.pause();
	float well_close_percent = (float(well_close) / float(samples)) * 100.0;
	println("WELL: %0%% consecutive values within 10%%, time=%1us".format(well_close_percent, float(t2.elapsed)));
	
	random_gamerand gamerand;
	int gamerand_close = 0;
	timer t3(0, 1);
	int prev_gamerand = gamerand.range(1, 1000);
	for (int i = 0; i < samples; i++) {
		int curr = gamerand.range(1, 1000);
		if (abs(curr - prev_gamerand) < 100)  // Within 10%
			gamerand_close++;
		prev_gamerand = curr;
	}
	t3.pause();
	float gamerand_close_percent = (float(gamerand_close) / float(samples)) * 100.0;
	println("Gamerand: %0%% consecutive values within 10%%, time=%1us".format(gamerand_close_percent, float(t3.elapsed)));
	
	random_xorshift xorshift;
	int xorshift_close = 0;
	timer t4(0, 1);
	int prev_xorshift = xorshift.range(1, 1000);
	for (int i = 0; i < samples; i++) {
		int curr = xorshift.range(1, 1000);
		if (abs(curr - prev_xorshift) < 100)  // Within 10%
			xorshift_close++;
		prev_xorshift = curr;
	}
	t4.pause();
	float xorshift_close_percent = (float(xorshift_close) / float(samples)) * 100.0;
	println("Xorshift: %0%% consecutive values within 10%%, time=%1us".format(xorshift_close_percent, float(t4.elapsed)));
	
	println("(Expected around 20%% for good randomness)");
}

void bench_float_precision() {
	println("\nTesting float generation precision");
	const int samples = 1000000;
	
	// Test how well distributed floats are in [0, 1)
	const int float_buckets = 10;
	
	random_pcg pcg;
	int[] pcg_float_counts(float_buckets);
	timer t1(0, 1);
	for (int i = 0; i < samples; i++) {
		float f = pcg.nextf();
		int bucket = int(f * float_buckets);
		if (bucket >= float_buckets) bucket = float_buckets - 1;
		pcg_float_counts[bucket]++;
	}
	t1.pause();
	
	println("PCG float distribution:");
	for (int i = 0; i < float_buckets; i++) {
		float percent = (float(pcg_float_counts[i]) / float(samples)) * 100.0;
		println("  [%0-%1): %2%%".format(float(i)/float_buckets, float(i+1)/float_buckets, percent));
	}
	println("Time: %0us".format(float(t1.elapsed)));
}

void main() {
	println("Random Number Generator Quality Benchmarks");
	println("==========================================");
	
	// Warm up
	println("Warming up the JIT...");
	random_pcg warmup;
	for (int i = 0; i < 10000; i++) {
		warmup.range(0, 99);
		warmup.next_bool();
		warmup.nextf();
	}
	
	bench_distribution_uniformity();
	bench_bool_bias();
	bench_sequence_independence();
	bench_float_precision();
	
	println("\nBenchmarks completed!");
}