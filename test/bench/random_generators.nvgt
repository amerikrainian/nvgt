// Benchmark for comparing different random number generators

void bench_pcg_range() {
	float total = 0.0;
	random_pcg pcg;
	
	println("Benchmarking PCG range(1, 1000)");
	for (int i = 0; i < 100; i++) {
		timer t(0, 1);
		for (int j = 0; j < 100000; j++)
			pcg.range(1, 1000);
		t.pause();
		total += float(t.elapsed);
	}
	float avg = total / 100.0;
	println("PCG range(1, 1000): total=%0us, avg per iteration=%1us".format(total, avg));
}

void bench_well_range() {
	float total = 0.0;
	random_well well;
	
	println("Benchmarking WELL range(1, 1000)");
	for (int i = 0; i < 100; i++) {
		timer t(0, 1);
		for (int j = 0; j < 100000; j++)
			well.range(1, 1000);
		t.pause();
		total += float(t.elapsed);
	}
	float avg = total / 100.0;
	println("WELL range(1, 1000): total=%0us, avg per iteration=%1us".format(total, avg));
}

void bench_gamerand_range() {
	float total = 0.0;
	random_gamerand gamerand;
	
	println("Benchmarking Gamerand range(1, 1000)");
	for (int i = 0; i < 100; i++) {
		timer t(0, 1);
		for (int j = 0; j < 100000; j++)
			gamerand.range(1, 1000);
		t.pause();
		total += float(t.elapsed);
	}
	float avg = total / 100.0;
	println("Gamerand range(1, 1000): total=%0us, avg per iteration=%1us".format(total, avg));
}

void bench_xorshift_range() {
	float total = 0.0;
	random_xorshift xorshift;
	
	println("Benchmarking Xorshift range(1, 1000)");
	for (int i = 0; i < 100; i++) {
		timer t(0, 1);
		for (int j = 0; j < 100000; j++)
			xorshift.range(1, 1000);
		t.pause();
		total += float(t.elapsed);
	}
	float avg = total / 100.0;
	println("Xorshift range(1, 1000): total=%0us, avg per iteration=%1us".format(total, avg));
}

void bench_global_random() {
	float total = 0.0;
	
	println("Benchmarking global random(1, 1000)");
	for (int i = 0; i < 100; i++) {
		timer t(0, 1);
		for (int j = 0; j < 100000; j++)
			random(1, 1000);
		t.pause();
		total += float(t.elapsed);
	}
	float avg = total / 100.0;
	println("Global random(1, 1000): total=%0us, avg per iteration=%1us".format(total, avg));
}

void bench_pcg_nextf() {
	float total = 0.0;
	random_pcg pcg;
	
	println("Benchmarking PCG nextf()");
	for (int i = 0; i < 100; i++) {
		timer t(0, 1);
		for (int j = 0; j < 100000; j++)
			pcg.nextf();
		t.pause();
		total += float(t.elapsed);
	}
	float avg = total / 100.0;
	println("PCG nextf(): total=%0us, avg per iteration=%1us".format(total, avg));
}

void bench_well_nextf() {
	float total = 0.0;
	random_well well;
	
	println("Benchmarking WELL nextf()");
	for (int i = 0; i < 100; i++) {
		timer t(0, 1);
		for (int j = 0; j < 100000; j++)
			well.nextf();
		t.pause();
		total += float(t.elapsed);
	}
	float avg = total / 100.0;
	println("WELL nextf(): total=%0us, avg per iteration=%1us".format(total, avg));
}

void bench_gamerand_nextf() {
	float total = 0.0;
	random_gamerand gamerand;
	
	println("Benchmarking Gamerand nextf()");
	for (int i = 0; i < 100; i++) {
		timer t(0, 1);
		for (int j = 0; j < 100000; j++)
			gamerand.nextf();
		t.pause();
		total += float(t.elapsed);
	}
	float avg = total / 100.0;
	println("Gamerand nextf(): total=%0us, avg per iteration=%1us".format(total, avg));
}

void bench_xorshift_nextf() {
	float total = 0.0;
	random_xorshift xorshift;
	
	println("Benchmarking Xorshift nextf()");
	for (int i = 0; i < 100; i++) {
		timer t(0, 1);
		for (int j = 0; j < 100000; j++)
			xorshift.nextf();
		t.pause();
		total += float(t.elapsed);
	}
	float avg = total / 100.0;
	println("Xorshift nextf(): total=%0us, avg per iteration=%1us".format(total, avg));
}

void main() {
	println("Random Number Generator Benchmarks");
	println("==================================");
	
	// Warm up JIT
	println("Warming up the JIT...");
	random_pcg pcg;
	for (int i = 0; i < 10000; i++) {
		pcg.range(1, 100);
		pcg.nextf();
		pcg.next();
	}
	
	println("\nBenchmark Set 1: range(1, 1000) performance");
	println("-------------------------------------------");
	bench_pcg_range();
	bench_well_range();
	bench_gamerand_range();
	bench_xorshift_range();
	bench_global_random();
	
	println("\nBenchmark Set 2: nextf() performance");
	println("------------------------------------");
	bench_pcg_nextf();
	bench_well_nextf();
	bench_gamerand_nextf();
	bench_xorshift_nextf();
	
	println("\nBenchmarks completed!");
}